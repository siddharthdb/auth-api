# src/main/resources/application.properties

# Application Information
spring.application.name=enterprise-auth-api
server.port=7981

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/auth_db
spring.datasource.username=authuser
spring.datasource.password=authuser
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Properties
# This will ensure tables are created
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# Defer datasource initialization until tables are created
spring.jpa.defer-datasource-initialization=true
# Initialize schema (create tables)
spring.sql.init.mode=always

# Connection Pool Configuration
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
spring.datasource.hikari.minimumIdle=2

spring.jpa.properties.hibernate.default_schema=auth_schema
spring.datasource.hikari.schema=auth_schema
spring.jpa.properties.hibernate.hbm2ddl.create_namespaces=true

# JWT Configuration (values in milliseconds)
# 15 minutes for access token
app.jwt.secret=your_super_secure_and_long_secret_key_at_least_64_characters_long_for_hs512_algorithm_jwt_auth
app.jwt.access-token-expiration=900000
# 30 days for refresh token
app.jwt.refresh-token-expiration=2592000000

# Cookie Properties (values in seconds)
app.cookie.secure=false
app.cookie.http-only=true
app.cookie.same-site=Strict
# 15 minutes for access token cookie
app.cookie.max-age-access=900
# 30 days for refresh token cookie
app.cookie.max-age-refresh=2592000

# OAuth2 Client Registration
spring.security.oauth2.client.registration.google.client-id=your-google-client-id
spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/auth/oauth2/callback/{registrationId}

# OAuth2 redirect URIs (comma-separated list)
app.oauth2.authorized-redirect-uris=http://localhost:3000/oauth2/redirect,http://localhost:8080/oauth2/redirect

# Logging Configuration
logging.level.root=INFO
logging.level.com.enterprise.authapi=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Spring MVC Configuration
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER
spring.mvc.servlet.path=/
spring.mvc.static-path-pattern=/static/**
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# Static resources (important for avoiding static resource conflicts)
spring.web.resources.add-mappings=false

# Server Servlet Configuration
server.servlet.context-path=/
server.error.whitelabel.enabled=false
server.error.include-stacktrace=never

# Session Management
spring.session.store-type=none

# Scheduler Configuration (for token cleanup)
spring.task.scheduling.pool.size=5